#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/pwm.h"
#include "hardware/adc.h"
#include "ssd1306.h" // Biblioteca para controle da tela OLED
#include "audio_processing.h" // Simulação de uma biblioteca para processar áudio

// Definições de pinos
#define MIC_PIN 28      // Pino ADC para o microfone
#define LED_R_PIN 13    // Pino para o LED vermelho
#define LED_G_PIN 12    // Pino para o LED verde
#define LED_B_PIN 11    // Pino para o LED azul

// Configuração do display OLED
#define I2C_SDA_PIN 4
#define I2C_SCL_PIN 5
#define OLED_ADDR 0x3C
#define OLED_WIDTH 128
#define OLED_HEIGHT 64

// Função para configurar o PWM
void setup_pwm(uint gpio) {
    gpio_set_function(gpio, GPIO_FUNC_PWM);
    uint slice_num = pwm_gpio_to_slice_num(gpio);
    pwm_set_wrap(slice_num, 255);
    pwm_set_enabled(slice_num, true);
}

// Função para definir a cor do LED RGB
void set_led_color(uint8_t r, uint8_t g, uint8_t b) {
    pwm_set_gpio_level(LED_R_PIN, r);
    pwm_set_gpio_level(LED_G_PIN, g);
    pwm_set_gpio_level(LED_B_PIN, b);
}

// Função principal
int main() {
    // Inicialização
    stdio_init_all();

    // Configuração dos pinos de LED RGB
    gpio_init(LED_R_PIN);
    gpio_init(LED_G_PIN);
    gpio_init(LED_B_PIN);
    setup_pwm(LED_R_PIN);
    setup_pwm(LED_G_PIN);
    setup_pwm(LED_B_PIN);

    // Configuração do ADC para o microfone
    adc_init();
    adc_gpio_init(MIC_PIN);
    adc_select_input(0);

    // Inicialização da tela OLED
    ssd1306_t oled;
    ssd1306_init(&oled, I2C_SDA_PIN, I2C_SCL_PIN, OLED_ADDR, OLED_WIDTH, OLED_HEIGHT);
    ssd1306_clear(&oled);

    // Array para armazenar as cores gravadas
    const char *colors[] = {"red", "green", "blue"};
    uint16_t color_samples[3] = {0};

    // Fase de gravação
    for (int i = 0; i < 3; i++) {
        ssd1306_clear(&oled);
        char message[32];
        snprintf(message, sizeof(message), "Grave a cor: %s", colors[i]);
        ssd1306_draw_string(&oled, 0, 0, message, 1);
        ssd1306_show(&oled);

        // Capturar amostra do microfone
        sleep_ms(3000); // Tempo para o usuário falar
        color_samples[i] = adc_read();

        ssd1306_clear(&oled);
        snprintf(message, sizeof(message), "Cor %s gravada!", colors[i]);
        ssd1306_draw_string(&oled, 0, 0, message, 1);
        ssd1306_show(&oled);
        sleep_ms(1000);
    }

    // Loop principal
    while (true) {
        // Capturar áudio do microfone
        uint16_t raw_audio = adc_read();

        // Comparar com as amostras gravadas
        int closest_match = -1;
        uint16_t min_difference = 0xFFFF;
        for (int i = 0; i < 3; i++) {
            uint16_t difference = (raw_audio > color_samples[i]) ? (raw_audio - color_samples[i]) : (color_samples[i] - raw_audio);
            if (difference < min_difference) {
                min_difference = difference;
                closest_match = i;
            }
        }

        // Alterar a cor do LED RGB com base na correspondência
        if (closest_match == 0) {
            set_led_color(255, 0, 0);
            ssd1306_draw_string(&oled, 0, 0, "Red", 1);
        } else if (closest_match == 1) {
            set_led_color(0, 255, 0);
            ssd1306_draw_string(&oled, 0, 0, "Green", 1);
        } else if (closest_match == 2) {
            set_led_color(0, 0, 255);
            ssd1306_draw_string(&oled, 0, 0, "Blue", 1);
        } else {
            set_led_color(0, 0, 0);
            ssd1306_draw_string(&oled, 0, 0, "Unknown", 1);
        }

        // Atualizar o display
        ssd1306_show(&oled);

        // Pequeno atraso para evitar atualizações muito rápidas
        sleep_ms(500);
    }
}
